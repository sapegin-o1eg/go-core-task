package main

import (
	"example/random/utils"
	"fmt"
	"strings"
	"time"
)

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const (
	ColorReset  = "\033[0m"
	ColorRed    = "\033[31m"
	ColorGreen  = "\033[32m"
	ColorYellow = "\033[33m"
	ColorBlue   = "\033[34m"
	ColorPurple = "\033[35m"
	ColorCyan   = "\033[36m"
	ColorWhite  = "\033[37m"
	ColorBold   = "\033[1m"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	utils.InitRandom()

	// –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
	printHeader("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –°–ª—É—á–∞–π–Ω—ã—Ö –ß–∏—Å–µ–ª üé≤")
	
	// –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
	printSection("1. –°–ª—É—á–∞–π–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞", ColorBlue)
	fmt.Printf("   –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (1-6): %s%d%s\n", 
		ColorYellow, utils.RandomInt(1, 6), ColorReset)
	fmt.Printf("   –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-65): %s%d%s –ª–µ—Ç\n", 
		ColorYellow, utils.RandomInt(18, 65), ColorReset)
	fmt.Printf("   –°–ª—É—á–∞–π–Ω—ã–π –≥–æ–¥ (1990-2024): %s%d%s\n", 
		ColorYellow, utils.RandomInt(1990, 2024), ColorReset)
	
	// –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª
	printSection("2. –°–ª—É—á–∞–π–Ω—ã–µ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞", ColorGreen)
	fmt.Printf("   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (18.0-28.0): %s%.2f%s¬∞C\n", 
		ColorYellow, utils.RandomFloat(18.0, 28.0), ColorReset)
	fmt.Printf("   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (5-25): %s%.1f%s%%\n", 
		ColorYellow, utils.RandomFloat(5.0, 25.0), ColorReset)
	fmt.Printf("   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (0.1-1.0): %s%.3f%s\n", 
		ColorYellow, utils.RandomFloat(0.1, 1.0), ColorReset)
	
	// –ü—Ä–∏–º–µ—Ä 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	printSection("3. –ú–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª", ColorPurple)
	lotteryNumbers := utils.RandomSlice(6, 1, 49)
	fmt.Print("   –õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ —á–∏—Å–ª–∞: ")
	for i, num := range lotteryNumbers {
		if i > 0 {
			fmt.Print(", ")
		}
		fmt.Printf("%s%02d%s", ColorCyan, num, ColorReset)
	}
	fmt.Println()
	
	scores := utils.RandomSlice(5, 60, 100)
	fmt.Print("   –û—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ")
	for i, score := range scores {
		if i > 0 {
			fmt.Print(" | ")
		}
		color := getScoreColor(score)
		fmt.Printf("%s%d%s", color, score, ColorReset)
	}
	fmt.Println()
	
	// –ü—Ä–∏–º–µ—Ä 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	printSection("4. –°–ª—É—á–∞–π–Ω—ã–µ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è", ColorCyan)
	for i := 0; i < 3; i++ {
		result := utils.RandomBool()
		if result {
			fmt.Printf("   –ü–æ–ø—ã—Ç–∫–∞ %d: %s‚úÖ –£—Å–ø–µ—Ö!%s\n", i+1, ColorGreen, ColorReset)
		} else {
			fmt.Printf("   –ü–æ–ø—ã—Ç–∫–∞ %d: %s‚ùå –ù–µ—É–¥–∞—á–∞%s\n", i+1, ColorRed, ColorReset)
		}
	}
	
	// –ü—Ä–∏–º–µ—Ä 5: –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
	printSection("5. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", ColorYellow)
	
	// –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
	colors := []string{"üî¥ –ö—Ä–∞—Å–Ω—ã–π", "üü¢ –ó–µ–ª—ë–Ω—ã–π", "üîµ –°–∏–Ω–∏–π", "üü° –ñ—ë–ª—Ç—ã–π", "üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π"}
	fmt.Printf("   –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç: %s%s%s\n", 
		ColorBold, utils.RandomChoice(colors), ColorReset)
	
	// –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
	actions := []string{"‚öîÔ∏è –ê—Ç–∞–∫–∞", "üõ°Ô∏è –ó–∞—â–∏—Ç–∞", "‚ú® –ú–∞–≥–∏—è", "üèÉ –ü–æ–±–µ–≥"}
	fmt.Printf("   –î–µ–π—Å—Ç–≤–∏–µ –≥–µ—Ä–æ—è: %s%s%s\n", 
		ColorBold, utils.RandomChoice(actions), ColorReset)
	
	// –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	directions := []string{"‚¨ÜÔ∏è –°–µ–≤–µ—Ä", "‚û°Ô∏è –í–æ—Å—Ç–æ–∫", "‚¨áÔ∏è –Æ–≥", "‚¨ÖÔ∏è –ó–∞–ø–∞–¥"}
	fmt.Printf("   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è: %s%s%s\n", 
		ColorBold, utils.RandomChoice(directions), ColorReset)
	
	// –ü—Ä–∏–º–µ—Ä 6: –ò–≥—Ä–æ–≤–æ–π –ø—Ä–∏–º–µ—Ä - –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã
	printSection("6. –ò–≥—Ä–∞: –û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞", ColorRed)
	fmt.Println("   –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—É...")
	time.Sleep(500 * time.Millisecond)
	
	for i := 0; i < 5; i++ {
		if utils.RandomBool() {
			fmt.Printf("   –ë—Ä–æ—Å–æ–∫ %d: %sü¶Ö –û–†–Å–õ%s\n", i+1, ColorYellow, ColorReset)
		} else {
			fmt.Printf("   –ë—Ä–æ—Å–æ–∫ %d: %süëë –†–ï–®–ö–ê%s\n", i+1, ColorCyan, ColorReset)
		}
		time.Sleep(300 * time.Millisecond)
	}
	
	// –ü—Ä–∏–º–µ—Ä 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
	printSection("7. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π", ColorGreen)
	password := generatePassword(12)
	fmt.Printf("   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: %s%s%s\n", 
		ColorBold+ColorYellow, password, ColorReset)
	
	// –ü—Ä–∏–º–µ—Ä 8: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	printSection("8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª", ColorBlue)
	showStatistics()
	
	// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	printFooter()
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞

func printHeader(title string) {
	width := 50
	fmt.Println()
	fmt.Printf("%s%s%s\n", ColorBold+ColorCyan, strings.Repeat("‚ïê", width), ColorReset)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –ø–æ–¥—Å—á—ë—Ç–∞ –¥–ª–∏–Ω—ã
	fmt.Printf("%s%*s%s\n", ColorBold+ColorCyan, 
		(width+len(title))/2, title, ColorReset)
	fmt.Printf("%s%s%s\n", ColorBold+ColorCyan, strings.Repeat("‚ïê", width), ColorReset)
	fmt.Println()
}

func printSection(title string, color string) {
	fmt.Printf("\n%s%s%s %s%s\n", ColorBold, color, "‚ñ∂", title, ColorReset)
	fmt.Printf("%s%s%s\n", color, strings.Repeat("‚îÄ", 40), ColorReset)
}

func printFooter() {
	width := 50
	fmt.Println()
	fmt.Printf("%s%s%s\n", ColorCyan, strings.Repeat("‚ïê", width), ColorReset)
	fmt.Printf("%s%s%s%s\n", ColorCyan, 
		strings.Repeat(" ", 15), "‚ú® –ì–æ—Ç–æ–≤–æ! ‚ú®", ColorReset)
	fmt.Printf("%s%s%s\n", ColorCyan, strings.Repeat("‚ïê", width), ColorReset)
	fmt.Println()
}

func getScoreColor(score int) string {
	switch {
	case score >= 90:
		return ColorGreen
	case score >= 75:
		return ColorYellow
	case score >= 60:
		return ColorBlue
	default:
		return ColorRed
	}
}

func generatePassword(length int) string {
	chars := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*"
	password := ""
	for i := 0; i < length; i++ {
		idx := utils.RandomInt(0, len(chars)-1)
		password += string(chars[idx])
	}
	return password
}

func showStatistics() {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	numbers := utils.RandomSlice(100, 1, 10)
	
	// –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã
	frequency := make(map[int]int)
	sum := 0
	for _, num := range numbers {
		frequency[num]++
		sum += num
	}
	
	// –í—ã–≤–æ–¥ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
	fmt.Println("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10 (100 –±—Ä–æ—Å–∫–æ–≤):")
	for i := 1; i <= 10; i++ {
		count := frequency[i]
		bar := strings.Repeat("‚ñà", count/2)
		if count%2 == 1 {
			bar += "‚ñå"
		}
		fmt.Printf("   %2d: %s%s%s %d\n", i, ColorCyan, bar, ColorReset, count)
	}
	
	avg := float64(sum) / float64(len(numbers))
	fmt.Printf("   –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: %s%.2f%s\n", ColorYellow, avg, ColorReset)
}